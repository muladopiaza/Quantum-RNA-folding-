%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Sun Jul 13 13:39:38 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCGGAUUUAGCUCAGUUGGGAGAGCGCCAGACUGAAGAUCUGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
) } def
/len { sequence length } bind def

/coor [
[126.92182159 222.44538879]
[124.48468018 207.64469910]
[122.04753876 192.84400940]
[119.61039734 178.04331970]
[117.17325592 163.24263000]
[114.73611450 148.44194031]
[112.29897308 133.64126587]
[94.57883453 133.64222717]
[79.92051697 125.34299469]
[71.71216583 111.64430237]
[56.86484528 113.77902222]
[42.01752472 115.91374207]
[27.17020226 118.04846954]
[20.04826546 131.83460999]
[6.16812372 138.77156067]
[-9.13302422 136.19192505]
[-19.97157478 125.08763123]
[-22.17988396 109.72849274]
[-14.90881348 96.02042389]
[-0.95423692 89.23445129]
[14.31802654 91.97992706]
[25.03547859 103.20114899]
[39.88280106 101.06642151]
[54.73012161 98.93170166]
[69.57744598 96.79698181]
[74.26545715 83.46141815]
[84.44844055 73.65724945]
[80.22245789 59.26485825]
[75.99646759 44.87246323]
[71.77047729 30.48006821]
[67.54448700 16.08767319]
[53.14718628 9.98426151]
[46.08749771 -3.96904683]
[49.69879532 -19.18392563]
[62.27593231 -28.47637558]
[77.88037109 -27.45878410]
[89.14417267 -16.61162758]
[90.74891663 -1.05660200]
[81.93688202 11.86168575]
[86.16287231 26.25407982]
[90.38886261 40.64647293]
[94.61485291 55.03886795]
[98.84083557 69.43126678]
[107.82135773 69.52559662]
[116.63387299 72.27335358]
[124.49160004 77.57851410]
[130.65162659 85.11154175]
[134.48416138 94.32752228]
[135.53457642 104.50473022]
[150.50650024 103.58730316]
[165.47842407 102.66987610]
[180.45033264 101.75244904]
[195.42225647 100.83502960]
[204.57633972 88.15682983]
[219.75074768 84.37904358]
[233.78056335 91.28543091]
[240.04135132 105.61499786]
[235.57696533 120.60176849]
[222.49533081 129.16943359]
[206.97322083 127.27262878]
[196.33967590 115.80694580]
[181.36776733 116.72437286]
[166.39584351 117.64179230]
[151.42391968 118.55921936]
[136.45201111 119.47664642]
[127.09966278 131.20411682]
[129.53680420 146.00480652]
[131.97393799 160.80549622]
[134.41108704 175.60618591]
[136.84822083 190.40686035]
[139.28536987 205.20755005]
[141.72251892 220.00823975]
[153.86859131 230.48928833]
[153.10317993 246.51406860]
[140.01344299 255.78974915]
[124.64070129 251.20082092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 72]
[2 71]
[3 70]
[4 69]
[5 68]
[6 67]
[7 66]
[10 25]
[11 24]
[12 23]
[13 22]
[27 43]
[28 42]
[29 41]
[30 40]
[31 39]
[49 65]
[50 64]
[51 63]
[52 62]
[53 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
